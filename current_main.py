import json
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import requests
import keyboards
import habits
from datetime import date
from bot_options import bot, dp, storage
import user


class HabitStates(StatesGroup):
    name = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    text = State()  # –¢–µ–∫—Å—Ç
    call_time = State()  # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    call_delay = State()  # –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π


class SettingsState(StatesGroup):
    call_time = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏


def add_user_in_db(name, id_):
    if requests.get('https://faithback.herokuapp.com/api/users/{}/'.format(name)).status_code != 200:
        requests.post(
            'https://faithback.herokuapp.com/api/users/', json={
                "login": name,
                "chat_id": id_
            }
        )


# # All users in db
# users = []
#
#
# def read_database_users():
#     r = requests.get('https://faithback.herokuapp.com/api/users/')
#
#     assert r.status_code == 200
#     return r.json()
#
#
# def notify_users(time: date):
#     global users
#
#     for user_ in users:
#         user_.call_habits(time)
#
#
# database_list = read_database_users()
# for database_user in database_list:
#     # read them from datatable
#     chosen_life_spheres = ["habits"]
#
#     habit_collections = {
#         'sport': habits.HabitCollection('sport'),
#         'meditation': habits.HabitCollection('meditation'),
#         'sleep': habits.HabitCollection('sleep'),
#         'mood': habits.HabitCollection('mood'),
#         'habits': habits.HabitCollection('habits')
#     }
#
#     for name in habit_collections:
#         habit_collections[name].init_from_file("./configs/" + name + "_config.json")
#
#     # read user options
#     user_options = user.UserOptions(database_user["chat_id"])
#
#     new_user = user.User(habit_collections, chosen_life_spheres, user_options)
#
#     new_user.set_progress("habits", database_user["habit_clusters"])
#
#     users.append(new_user)


@dp.message_handler(commands="start")
async def start_handler(event: types.Message):
    user_name = event.from_user.username

    add_user_in_db(user_name, event.from_user.id)

    await event.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è Octopusüêô, —É –º–µ–Ω—è –º–Ω–æ–≥–æ –ª–∞–ø–æ–∫ –∏ –∏–º–∏ –≤—Å–µ–º–∏ —è —Ö–æ—á—É —Ç–µ–±–µ –ø–æ–º–æ—á—å!"
        "–í–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è"
        "–∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n–°–ø–µ—Ä–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=keyboards.get_main_menu_keyboard()
    )


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def settings_handler(event: types.Message):
    user_name = event.from_user.username

    add_user_in_db(user_name, event.from_user.id)

    await SettingsState.call_time.set()

    await event.reply(
        "–ß—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –¥–µ–ª–∞—Ö –≤–æ–≤—Ä–µ–º—è –º–Ω–µ –Ω—É–∂–Ω–æ"
        "–∑–Ω–∞—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +/-**:** UTC",
        reply_markup=keyboards.get_temporary_keyboard()
    )


@dp.message_handler(state=SettingsState.call_time)
async def process_settings_time(event: types.Message, state: FSMContext):
    if event.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await state.finish()
        await event.answer(
            "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return

    requests.post(
        'https://faithback.herokuapp.com/api/users/', json={
            "login": event.from_user.username,
            "time_shift": event.text
        }
    )

    await state.finish()

    await event.answer(
        "–ó–∞–ø–æ–º–Ω–∏–ª!",
        reply_markup=keyboards.get_main_menu_keyboard()
    )


@dp.message_handler(Text(equals="–î–æ–±–∞–≤–∏—Ç—å"))
async def add_habit_handler(event: types.Message):
    pass


@dp.message_handler(Text(equals="–£–¥–∞–ª–∏—Ç—å"))
async def remove_habit_handler(event: types.Message):
    pass


@dp.message_handler(Text(equals="–†–µ–∂–∏–º"))
async def mode_handler(event: types.Message):
    pass


# # –ü—Ä–æ–ø–∏—Å–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
# async def add_habit(message: types.Message):
#     user_name = message.from_user.username
#     r = requests.get('https://faithback.herokuapp.com/api/users/{}/'.format(user_name))
#     if r.status_code != 200:
#         await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
#     else:
#         await HabitForm.emoji.set()
#         await message.reply(
#             '–û–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–º',
#             reply_markup=keyboards.get_analyse_keyboard_markup()
#         )
#
#
# @dp.message_handler(state=HabitForm.emoji)
# async def process_emoji(event: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['emoji'] = event.text
#     print('emoji:', data['emoji'])
#     await event.reply('–í–∫—Ä–∞—Ç—Ü–µ –æ–ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')
#     await HabitForm.next()
#
#
# @dp.message_handler(state=HabitForm.description)
# async def process_text(event: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['description'] = event.text
#     print('text:', data['description'])
#     await process_mood(event, state)
#
#
# # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
# @dp.message_handler(state=HabitForm.mood)
# async def process_mood(event: types.Message, state: FSMContext):
#     user_name = event.from_user.username
#     r = requests.get('https://faithback.herokuapp.com/api/users/{}/'.format(user_name))
#
#     async with state.proxy() as data:
#         requests.post(
#             'https://faithback.herokuapp.com/api/mood/',
#             json={
#                 "mood": keyboards.transform_emoji(data['emoji']),
#                 "user": r.json()['id'],
#                 "description": data['description'],
#                 "description_tone": dict(emotion_model.get_emotion_array(data['description']))
#             }
#         )
#     await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp)
