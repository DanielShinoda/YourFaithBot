import json
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import requests
import keyboards
import habits
from datetime import date
from bot_options import bot, dp, storage
import user


class HabitStates(StatesGroup):
    name = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    text = State()  # –¢–µ–∫—Å—Ç
    call_time = State()  # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    call_delay = State()  # –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    call_delay_pick = State()  # –í—ã–±–æ—Ä


class SettingsState(StatesGroup):
    call_time = State()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏


def add_user_in_db(name, id_):
    if requests.get('https://faithback.herokuapp.com/api/users/{}/'.format(name)).status_code != 200:
        requests.post(
            'https://faithback.herokuapp.com/api/users/', json={
                "login": name,
                "chat_id": id_
            }
        )


# # All users in db
# users = []
#
#
# def read_database_users():
#     r = requests.get('https://faithback.herokuapp.com/api/users/')
#
#     assert r.status_code == 200
#     return r.json()
#
#
# def notify_users(time: date):
#     global users
#
#     for user_ in users:
#         user_.call_habits(time)
#
#
# database_list = read_database_users()
# for database_user in database_list:
#     # read them from datatable
#     chosen_life_spheres = ["habits"]
#
#     habit_collections = {
#         'sport': habits.HabitCollection('sport'),
#         'meditation': habits.HabitCollection('meditation'),
#         'sleep': habits.HabitCollection('sleep'),
#         'mood': habits.HabitCollection('mood'),
#         'habits': habits.HabitCollection('habits')
#     }
#
#     for name in habit_collections:
#         habit_collections[name].init_from_file("./configs/" + name + "_config.json")
#
#     # read user options
#     user_options = user.UserOptions(database_user["chat_id"])
#
#     new_user = user.User(habit_collections, chosen_life_spheres, user_options)
#
#     new_user.set_progress("habits", database_user["habit_clusters"])
#
#     users.append(new_user)


@dp.message_handler(commands="start")
async def start_handler(event: types.Message):
    user_name = event.from_user.username

    add_user_in_db(user_name, event.from_user.id)

    await event.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è Octopusüêô, —É –º–µ–Ω—è –º–Ω–æ–≥–æ –ª–∞–ø–æ–∫ –∏ –∏–º–∏ –≤—Å–µ–º–∏ —è —Ö–æ—á—É —Ç–µ–±–µ –ø–æ–º–æ—á—å!"
        "–í–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è"
        "–∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n–°–ø–µ—Ä–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π –≤—Ä–µ–º—è, –Ω–∞–∂–∞–≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        reply_markup=keyboards.get_main_menu_keyboard()
    )


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def settings_handler(event: types.Message):
    user_name = event.from_user.username

    add_user_in_db(user_name, event.from_user.id)

    await SettingsState.call_time.set()

    await event.reply(
        "–ß—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –¥–µ–ª–∞—Ö –≤–æ–≤—Ä–µ–º—è –º–Ω–µ –Ω—É–∂–Ω–æ"
        "–∑–Ω–∞—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +/-**:** UTC",
        reply_markup=keyboards.get_temporary_keyboard()
    )


@dp.message_handler(state=SettingsState.call_time)
async def process_settings_time(event: types.Message, state: FSMContext):
    if event.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await state.finish()
        await event.answer(
            "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return

    r = requests.post(
        'https://faithback.herokuapp.com/api/users/'.format(event.from_user.username), json={
            "login": event.from_user.username,
            "chat_id": event.from_user.id,
            "time_shift": event.text
        }
    )

    print(r)

    await state.finish()

    await event.answer(
        "–ó–∞–ø–æ–º–Ω–∏–ª!",
        reply_markup=keyboards.get_main_menu_keyboard()
    )


@dp.message_handler(Text(equals="–î–æ–±–∞–≤–∏—Ç—å"))
async def add_habit_handler(event: types.Message):
    user_name = event.from_user.username

    add_user_in_db(user_name, event.from_user.id)

    await HabitStates.name.set()

    await event.reply(
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏",
        reply_markup=keyboards.get_temporary_keyboard()
    )


@dp.message_handler(state=HabitStates.name)
async def process_habit_name(event: types.Message, state: FSMContext):
    if event.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await state.finish()
        await event.answer(
            "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return

    async with state.proxy() as data:
        data['name'] = event.text

    await event.answer(
        "–í–≤–µ–¥–∏, —á—Ç–æ –º–Ω–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è",
        reply_markup=keyboards.get_temporary_keyboard()
    )

    await HabitStates.next()


@dp.message_handler(state=HabitStates.text)
async def process_habit_text(event: types.Message, state: FSMContext):
    if event.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await state.finish()
        await event.answer(
            "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return

    async with state.proxy() as data:
        data['text'] = event.text

    await event.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏–ª\n"
        "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–ª–∞—Å—å, –≤–≤–µ–¥–∏ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –º–Ω–µ –Ω–∞–¥–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å\n"
        "–§–æ—Ä–º–∞—Ç: Jun 1 2005 1:33PM",
        reply_markup=keyboards.get_temporary_keyboard()
    )

    await HabitStates.next()


@dp.message_handler(state=HabitStates.call_time)
async def process_habit_call_time(event: types.Message, state: FSMContext):
    if event.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await state.finish()
        await event.answer(
            "–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
        return

    async with state.proxy() as data:
        data['call_time'] = event.text

    await event.answer(
        "–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º?",
        reply_markup=keyboards.get_call_delay_keyboard()
    )

    await HabitStates.next()


@dp.message_handler(state=HabitStates.call_delay)
async def process_habit_name(event: types.Message, state: FSMContext):
    if event.text == "–ù–µ—Ç":
        await state.finish()

        async with state.proxy() as data:
            pass
            # new_habit = habits.Habit(
            #     habits.HabitOptions(
            #         data['name'],
            #         data['text'],
            #         date(data['call_time']),
            #
            #     )
            # )

        async with state.proxy() as data:
            temp = "–î–æ–±–∞–≤–∏–ª –ø—Ä–∏–≤—ã—á–∫—É:\n" + \
                   "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: {}\n".format(data['name']) + \
                   "–ë—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ: {}\n".format(data['text']) + \
                   "–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {}\n".format(data['call_time'])
            await event.answer(
                temp,
                reply_markup=keyboards.get_main_menu_keyboard()
            )
        return

    await event.answer(
        "–ö–∞–∫ —á–∞—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?",
        reply_markup=keyboards.get_call_delay_pick_keyboard()
    )

    await HabitStates.next()


@dp.message_handler(state=HabitStates.call_delay_pick)
async def process_habit_call_delay_pick(event: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # new_habit = habits.Habit(
        #     habits.HabitOptions(
        #         data['name'],
        #         data['text'],
        #         date(data['call_time']),
        #
        #     )
        # )
        temp = "–î–æ–±–∞–≤–∏–ª –ø—Ä–∏–≤—ã—á–∫—É:\n" + \
               "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: {}\n".format(data['name']) + \
               "–ë—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ: {}\n".format(data['text']) + \
               "–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {}\n".format(data['call_time']) + \
               "–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {}".format(event.text)
        await event.answer(
            temp,
            reply_markup=keyboards.get_main_menu_keyboard()
        )
    await state.finish()


@dp.message_handler(Text(equals="–£–¥–∞–ª–∏—Ç—å"))
async def remove_habit_handler(event: types.Message):
    pass


@dp.message_handler(Text(equals="–†–µ–∂–∏–º"))
async def mode_handler(event: types.Message):
    pass


if __name__ == '__main__':
    executor.start_polling(dp)
